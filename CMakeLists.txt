cmake_minimum_required(VERSION 3.5)
project(LinuxUtils LANGUAGES CXX)

set(OUTPUTNAME "LinuxUtils")
#if(CMAKE_BUILD_TYPE MATCHES Debug)
#    message("*********TEST build***********")
##    set(OUTPUTNAME "LinuxUtilsUnitTest")
#endif()
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/include/
    ${CMAKE_CURRENT_SOURCE_DIR}/source/
    )
file(GLOB_RECURSE SOURCES_LINUX_STANDARD
    ${CMAKE_CURRENT_SOURCE_DIR}/source/*.cpp
    )
add_library(LinuxStandard ${SOURCES_LINUX_STANDARD})




set(CMAKE_C_STANDARD 90)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb3")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fmessage-length=0")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-psabi")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=return-type")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fstack-protector-all")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=format")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=write-strings")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=reorder")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=unused-variable ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive ")


if(CMAKE_BUILD_TYPE MATCHES Debug)
    file(GLOB_RECURSE SOURCES_MAIN  ${CMAKE_CURRENT_SOURCE_DIR}/unitTest/*.cpp  )
else()
    file(GLOB_RECURSE SOURCES_MAIN  ${CMAKE_CURRENT_SOURCE_DIR}/main/*.cpp      )
endif()
add_executable(${OUTPUTNAME} ${SOURCES_MAIN})

if(CMAKE_BUILD_TYPE MATCHES Debug)
    find_library(LIBGTESTMAIN NAMES gtest_main)
    find_library(LIBGTEST NAMES gtest)
    find_library(LIBGMOCK NAMES gmock)
    target_link_libraries(${OUTPUTNAME}
        ${LIBGTESTMAIN}
        ${LIBGTEST}
		${LIBGMOCK}
        )
endif()

#find_library(LIBDL NAMES dl)
find_library(LIBPTHREAD NAMES pthread)
#find_library(LIBRT NAMES rt)




set(MAJOR_VERSION "1")
set(MINOR_VERSION "0")
set(PATCH_VERSION "0")

set(CPACK_GENERATOR "DEB")
set(CPACK_PACKAGE_NAME "${BINARY_NAME}_${GIT_BRANCH}-${GIT_COMMIT_HASH}")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${GIT_COMMIT_MESSAGE})
set(CPACK_PACKAGE_CONTACT "yzhu798")
set(CPACK_PACKAGE_VERSION ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}+git0+${GIT_COMMIT_HASH}+${GIT_BRANCH}-r0)
set(CPACK_PACKAGE_VERSION_MAJOR "${MAJOR_VERSION}")
set(CPACK_PACKAGE_VERSION_MINOR "${MINOR_VERSION}")
set(CPACK_PACKAGE_VERSION_PATCH "${PATCH_VERSION}")
set(CPACK_PACKAGE_ARCHITECTURE "armv7ahf-neon")
set(CPACK_PACKAGE_FILE_NAME ${CPACK_PACKAGE_NAME}_${CPACK_PACKAGE_ARCHITECTURE})
set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${CPACK_PACKAGE_ARCHITECTURE})
set(CPACK_DEBIAN_PACKAGE_SECTION "yzhu798")
set(CPACK_DEBIAN_ARCHIVE_TYPE "paxr")
set(CPACK_DEBIAN_COMPRESSION_TYPE "gzip")
set(CPACK_SET_DESTDIR true)
set(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_BINARY_DIR}")
set(CPACK_PACKAGING_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
set(CPACK_STRIP_FILES "EXECUTABLE_OUTPUT_PATH/${OUTPUTNAME}")
include(CPack)



